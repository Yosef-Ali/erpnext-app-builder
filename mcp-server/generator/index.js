// App Structure Generator
const generateAppStructure = async (analysis, templates, options = {}) => {
  const structure = {
    app_name: options.app_name || 'custom_app',
    app_title: options.app_title || 'Custom App',
    app_description: options.app_description || 'Generated by ERPNext App Builder',
    app_publisher: options.app_publisher || 'App Builder',
    app_email: options.app_email || 'builder@example.com',
    app_license: options.app_license || 'MIT',
    doctypes: [],
    workflows: [],
    reports: [],
    permissions: [],
    scripts: {
      client: [],
      server: []
    }
  };

  // Generate DocTypes from entities
  if (analysis.entities) {
    for (const entity of analysis.entities) {
      structure.doctypes.push(await generateDocType(entity, analysis));
    }
  }

  // Generate workflows
  if (analysis.workflows) {
    for (const workflow of analysis.workflows) {
      structure.workflows.push(await generateWorkflow(workflow, structure.doctypes));
    }
  }

  return structure;
};

const generateDocType = async (entity, analysis) => {
  const doctype = {
    name: entity.doctype,
    module: entity.module,
    custom: 1,
    naming: 'format:{' + entity.doctype.toUpperCase().substring(0, 3) + '}-{####}',
    fields: [],
    permissions: []
  };

  // Add standard fields
  doctype.fields.push({
    fieldname: 'section_break_1',
    fieldtype: 'Section Break',
    label: 'Basic Information'
  });

  // Add entity-specific fields
  const fieldName = entity.name.toLowerCase().replace(/\s+/g, '_');
  doctype.fields.push({
    fieldname: fieldName + '_name',
    fieldtype: 'Data',
    label: entity.name + ' Name',
    reqd: 1,
    bold: 1
  });

  doctype.fields.push({
    fieldname: 'description',
    fieldtype: 'Text Editor',
    label: 'Description'
  });

  // Add common fields based on entity type
  if (entity.name.toLowerCase().includes('customer') || entity.name.toLowerCase().includes('supplier')) {
    doctype.fields.push({
      fieldname: 'email',
      fieldtype: 'Data',
      label: 'Email',
      options: 'Email'
    });
    doctype.fields.push({
      fieldname: 'phone',
      fieldtype: 'Data',
      label: 'Phone',
      options: 'Phone'
    });
  }

  // Add standard permissions
  doctype.permissions.push({
    role: 'System Manager',
    read: 1,
    write: 1,
    create: 1,
    delete: 1,
    submit: 0,
    cancel: 0
  });

  return doctype;
};

const generateWorkflow = async (workflow, doctypes) => {
  const wf = {
    name: workflow.name,
    document_type: '',
    is_active: 1,
    states: [],
    transitions: []
  };

  // Map workflow to appropriate doctype
  if (workflow.matched_keywords && doctypes.length > 0) {
    // Simple mapping - can be enhanced
    wf.document_type = doctypes[0].name;
  }

  // Generate states
  if (workflow.states) {
    workflow.states.forEach((state, index) => {
      wf.states.push({
        state: state,
        style: getStateStyle(state),
        doc_status: index === workflow.states.length - 1 ? 1 : 0
      });
    });
  }

  return wf;
};

const getStateStyle = (state) => {
  const styles = {
    'draft': 'Warning',
    'pending': 'Warning', 
    'approved': 'Success',
    'rejected': 'Danger',
    'cancelled': 'Danger',
    'completed': 'Success'
  };
  
  const stateLower = state.toLowerCase();
  for (const [key, style] of Object.entries(styles)) {
    if (stateLower.includes(key)) {
      return style;
    }
  }
  return 'Primary';
};

module.exports = {
  generate: generateAppStructure
};
